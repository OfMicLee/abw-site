<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true" scan="true" scanPeriod="30 seconds">
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
    <contextName>itemcenter</contextName>
    <property scope="context" name="CHARSET" value="utf-8" />

    <property scope="context" name="LOG_HOME" value="${catalina.base}/abwlogs/" />
    <property scope="context" name="APP_LOG_HOME" value="${LOG_HOME}/app" />
    <property scope="context" name="ACTION_LOG_HOME" value="${LOG_HOME}/action" />
    <property scope="context" name="ERR_LOG_HOME" value="${LOG_HOME}/err" />

    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
    <property scope="context" name="APP_PATTERN" value='%d{yyyy-MM-dd HH:mm:ss.SSS}|%level|%M|%C\:%L|%thread|%replace(%.-2000msg){"(\r|\n)","\t"}|"%.-2000ex{full}"%n' />
    <property scope="context" name="ACTION_PATTERN" value='${APP_PATTERN}' />
    <property scope="context" name="ERR_PATTERN" value='${APP_PATTERN}' />

    <!-- ERROR日志文件 -->
    <appender name="ERR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 只记录warn及以上级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
        <file>${ERR_LOG_HOME}/err.${HOSTNAME}.ing</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名，按天生成文件名 -->
            <fileNamePattern>${ERR_LOG_HOME}/err.${HOSTNAME}.%d{yyyy-MM-dd}.log.%i.zip</fileNamePattern>
            <MaxHistory>60</MaxHistory><!--日志文件保留天数 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 按时间回滚的同时，按文件大小来回滚 -->
                <maxFileSize>30MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>${CHARSET}</charset>
            <pattern>${ERR_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 行为日志文件 -->
    <appender name="ACTION_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${INF_LOG_HOME}/action.${HOSTNAME}.ing</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名，按天生成文件名 -->
            <fileNamePattern>${ACTION_LOG_HOME}/action.${HOSTNAME}.%d{yyyy-MM-dd}.log.%i.zip</fileNamePattern>
            <MaxHistory>60</MaxHistory><!--日志文件保留天数 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 按时间回滚的同时，按文件大小来回滚 -->
                <maxFileSize>300MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>${CHARSET}</charset>
            <pattern>${ACTION_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 开发者日志文件 -->
    <appender name="APP_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${APP_LOG_HOME}/app.${HOSTNAME}.ing</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名，按天生成文件名 -->
            <fileNamePattern>${APP_LOG_HOME}/app.${HOSTNAME}.%d{yyyy-MM-dd}.log.%i.zip</fileNamePattern>
            <MaxHistory>60</MaxHistory><!--日志文件保留天数 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 按时间回滚的同时，按文件大小来回滚 -->
                <maxFileSize>30MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>${CHARSET}</charset>
            <pattern>${APP_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder" charset="${CHARSET}">
            <pattern>${APP_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 异步输出 -->
    <appender name ="ERR_ASYNC" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold >512</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <includeCallerData>true</includeCallerData>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="ERR_FILE"/>
    </appender>

    <!-- 异步输出 -->
    <appender name ="ACTION_ASYNC" class= "ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold >512</discardingThreshold>
        <queueSize>1024</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref ="ACTION_FILE"/>
    </appender>

    <!-- 异步输出 -->
    <appender name ="APP_ASYNC" class= "ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold >512</discardingThreshold>
        <queueSize>1024</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref ="APP_FILE"/>
    </appender>

    <if condition='property("HOSTNAME").contains("lin")'>
        <then>
            <!-- 线上环境的配置，根据日志规范约定输出 -->
            <root level="WARN">
                <appender-ref ref="ERR_ASYNC" />
            </root>
            <logger name="actionlog" level="INFO">
                <appender-ref ref="ACTION_ASYNC" />
            </logger>
            <logger name="com.allbuywine.site" level="WARN">
                <appender-ref ref="APP_ASYNC" />
            </logger>
            <logger name="com.alibaba.dubbo.registry.redis" level="ERROR" />
        </then>
        <else>
            <!-- 自测环境的配置，全部输出到控制台 -->
            <root level="INFO">
                <appender-ref ref="STDOUT" />
            </root>
            <logger name="actionlog" level="INFO" />
            <logger name="com.allbuywine.site" level="INFO" />
            <logger name="org.springframework" level="ERROR" />
            <logger name="com.alibaba.dubbo.registry.redis" level="ERROR" />
            <!--myibatis log configure -->
            <!-- <logger name="com.apache.ibatis" level="TRACE" /> -->
            <!-- <logger name="java.sql.Connection" level="DEBUG" /> -->
            <!-- <logger name="java.sql.Statement" level="DEBUG" /> -->
            <!-- <logger name="java.sql.PreparedStatement" level="DEBUG" /> -->
        </else>
    </if>




</configuration>